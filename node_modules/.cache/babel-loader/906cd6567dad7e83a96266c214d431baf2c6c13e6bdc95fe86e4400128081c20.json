{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harshit Saini\\\\Downloads\\\\alchemynftstreet\\\\Street\\\\src\\\\components\\\\Marketplace.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [dataFetched, updateFetched] = useState(false);\nasync function getAllNFTs() {\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  //Pull the deployed contract instance\n  let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n  //create an NFT Token\n  let transaction = await contract.getAllNFTs();\n\n  //Fetch all the details of every NFT from the contract and display\n  const items = await Promise.all(transaction.map(async i => {\n    var tokenURI = await contract.tokenURI(i.tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n    let item = {\n      price,\n      tokenId: i.tokenId.toNumber(),\n      seller: i.seller,\n      owner: i.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    return item;\n  }));\n  updateFetched(true);\n  updateData(items);\n}\nif (!dataFetched) getAllNFTs();\nexport default function Marketplace() {\n  _s();\n  const sampleData = [{\n    \"name\": \"NFT#1\",\n    \"description\": \"Alchemy's First NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"name\": \"NFT#2\",\n    \"description\": \"Alchemy's Second NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"name\": \"NFT#3\",\n    \"description\": \"Alchemy's Third NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n  const [data, updateData] = useState(sampleData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Marketplace, \"R0KYTR1r7Bwx/yy4wRx9UU25Bdg=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsxDEV","_jsxDEV","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","meta","get","data","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","updateData","Marketplace","_s","sampleData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","index","_c","$RefreshReg$"],"sources":["C:/Users/Harshit Saini/Downloads/alchemynftstreet/Street/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nconst [dataFetched, updateFetched] = useState(false);\n\nasync function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs()\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n        var tokenURI = await contract.tokenURI(i.tokenId);\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        return item;\n    }))\n\n    updateFetched(true);\n    updateData(items);\n}\n\nif(!dataFetched)\n    getAllNFTs();\nexport default function Marketplace() {\nconst sampleData = [\n    {\n        \"name\": \"NFT#1\",\n        \"description\": \"Alchemy's First NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#2\",\n        \"description\": \"Alchemy's Second NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#3\",\n        \"description\": \"Alchemy's Third NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n];\nconst [data, updateData] = useState(sampleData);\n\nreturn (\n    <div>\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-20\">\n            <div className=\"md:text-xl font-bold text-white\">\n                Top NFTs\n            </div>\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n                {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                })}\n            </div>\n        </div>            \n    </div>\n);\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}