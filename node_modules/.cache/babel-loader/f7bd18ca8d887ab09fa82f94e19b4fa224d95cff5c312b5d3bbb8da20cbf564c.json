{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harshit Saini\\\\Downloads\\\\alchemynftstreet\\\\Street\\\\src\\\\components\\\\NFTpage.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n  const [data, updateData] = useState({});\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, 'ether');\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice\n      });\n      await transaction.wait();\n      alert('You successfully bought the NFT!');\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  if (typeof data.image == \"string\") data.image = GetIpfsUrlFromPinata(data.image);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.seller\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress != data.owner && currAddress != data.seller ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            onClick: () => buyNFT(tokenId),\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(NFTPage, \"z4RkZnH3PtFXdiLyvfzgIHdm/Bc=\", false, function () {\n  return [useParams];\n});\n_c = NFTPage;\nvar _c;\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsxDEV","_jsxDEV","NFTPage","props","_s","data","updateData","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","updateDataFetched","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e","params","dataFetched","style","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Harshit Saini/Downloads/alchemynftstreet/Street/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function NFTPage (props) {\n\nconst [data, updateData] = useState({});\nconst [message, updateMessage] = useState(\"\");\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\nasync function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n        price: meta.price,\n        tokenId: tokenId,\n        seller: listedToken.seller,\n        owner: listedToken.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n    }\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr)\n    updateCurrAddress(addr);\n}\n\nasync function buyNFT(tokenId) {\n    try {\n        const ethers = require(\"ethers\");\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n        //run the executeSale function\n        let transaction = await contract.executeSale(tokenId, {value:salePrice});\n        await transaction.wait();\n\n        alert('You successfully bought the NFT!');\n        updateMessage(\"\");\n    }\n    catch(e) {\n        alert(\"Upload Error\"+e)\n    }\n}\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n    if(typeof data.image == \"string\")\n        data.image = GetIpfsUrlFromPinata(data.image);\n\n    return(\n        <div style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"flex ml-20 mt-20\">\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n                    <div>\n                        Name: {data.name}\n                    </div>\n                    <div>\n                        Description: {data.description}\n                    </div>\n                    <div>\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\n                    </div>\n                    <div>\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\n                    </div>\n                    <div>\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\n                    </div>\n                    <div>\n                    { currAddress != data.owner && currAddress != data.seller ?\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n                    }\n                    \n                    <div className=\"text-green text-center mt-3\">{message}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}