{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harshit Saini\\\\Downloads\\\\alchemynftstreet\\\\Street\\\\src\\\\components\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport { useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n  const [data, updateData] = useState([]);\n  const [dataFetched, updateFetched] = useState(false);\n  const [address, updateAddress] = useState(\"0x\");\n  const [totalPrice, updateTotalPrice] = useState(\"0\");\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateFetched(true);\n    console.log(\"address\", addr);\n    updateAddress(addr);\n  }\n  const params = useParams();\n  const tokenId = params.tokenId;\n  useEffect(() => {\n    if (tokenId && !dataFetched) {\n      getNFTData(tokenId);\n    }\n  }, [dataFetched, tokenId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profileClass\",\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileClass\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex text-center flex-col mt-11 md:text-2xl text-black\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold\",\n            children: \"Wallet Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this), address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row text-center justify-center mt-10 md:text-2xl text-black\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold\",\n            children: \"No. of NFTs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), data.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-20\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold\",\n            children: \"Total Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), totalPrice, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col text-center items-center mt-11 text-black\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"font-bold\",\n          children: \"Your NFTs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center flex-wrap max-w-screen-xl\",\n          children: data.map((value, index) => {\n            return /*#__PURE__*/_jsxDEV(NFTTile, {\n              data: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 28\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-10 text-xl\",\n          children: data.length === 0 ? \"Oops, No NFT data to display \" : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(Profile, \"u0HyO1BLMQcZatut8a+ZRDLzoUo=\", false, function () {\n  return [useParams];\n});\n_c = Profile;\n;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["Navbar","useParams","MarketplaceJSON","axios","useState","NFTTile","React","useEffect","jsxDEV","_jsxDEV","Profile","_s","data","updateData","dataFetched","updateFetched","address","updateAddress","totalPrice","updateTotalPrice","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","abi","tokenURI","listedToken","getListedTokenForId","GetIpfsUrlFromPinata","meta","get","console","log","item","price","seller","owner","image","name","description","params","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","value","index","_c","$RefreshReg$"],"sources":["C:/Users/Harshit Saini/Downloads/alchemynftstreet/Street/src/components/Profile.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport {  useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\nimport React, { useEffect } from 'react';\nexport default function Profile () {\n    const [data, updateData] = useState([]);\n    const [dataFetched, updateFetched] = useState(false);\n    const [address, updateAddress] = useState(\"0x\");\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n    async function getNFTData(tokenId) {\n        const ethers = require(\"ethers\");\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const addr = await signer.getAddress();\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n        //create an NFT Token\n        var tokenURI = await contract.tokenURI(tokenId);\n        const listedToken = await contract.getListedTokenForId(tokenId);\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n        console.log(listedToken);\n    \n        let item = {\n            price: meta.price,\n            tokenId: tokenId,\n            seller: listedToken.seller,\n            owner: listedToken.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        console.log(item);\n        updateData(item);\n        updateFetched(true);\n        console.log(\"address\", addr)\n        updateAddress(addr);\n    }\n    \n    \n\n    const params = useParams();\n    const tokenId = params.tokenId;\n\n    useEffect(() => {\n        if (tokenId && !dataFetched) {\n            getNFTData(tokenId);\n        }\n    }, [dataFetched, tokenId]);\n\n    \n    return (\n        <div className=\"profileClass\" style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"profileClass\">\n            <div className=\"flex text-center flex-col mt-11 md:text-2xl text-black\">\n                <div className=\"mb-5\">\n                    <h2 className=\"font-bold\">Wallet Address</h2>  \n                    {address}\n                </div>\n            </div>\n            <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-black\">\n                    <div>\n                        <h2 className=\"font-bold\">No. of NFTs</h2>\n                        {data.length}\n                    </div>\n                    <div className=\"ml-20\">\n                        <h2 className=\"font-bold\">Total Value</h2>\n                        {totalPrice} ETH\n                    </div>\n            </div>\n            <div className=\"flex flex-col text-center items-center mt-11 text-black\">\n                <h2 className=\"font-bold\">Your NFTs</h2>\n                <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n                    {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                    })}\n                </div>\n                <div className=\"mt-10 text-xl\">\n                    {data.length === 0 ? \"Oops, No NFT data to display \":\"\"}\n                </div>\n            </div>\n            </div>\n        </div>\n    )\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}